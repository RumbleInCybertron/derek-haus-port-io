datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Stock {
  id        String      @id @default(cuid())
  name      String
  ticker    String
  index     String
  price     Float
  UserStock UserStock[]
}

model UserStock {
  id           String        @id @default(cuid())
  transactions Transaction[]
  shares       Int
  user         User?         @relation(fields: [userId], references: [id])
  userId       String?
  stock        Stock?        @relation(fields: [stockId], references: [id])
  stockId      String?
}

model Transaction {
  id          String     @id @default(cuid())
  ticker      String
  price       Float
  units       Float
  type        String
  createdAt   DateTime   @default(now()) @map(name: "created_at")
  user        User?      @relation(fields: [userId], references: [id])
  userId      String?
  UserStock   UserStock? @relation(fields: [userStockId], references: [id])
  userStockId String?
}

enum Role {
  USER
  ADMIN
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  image         String?
  createdAt     DateTime      @default(now()) @map(name: "created_at")
  updatedAt     DateTime      @updatedAt @map(name: "updated_at")
  UserStock     UserStock[]
  Transaction   Transaction[]
  accounts      Account[]
  Session       Session[]
  emailVerified DateTime?     @map("email_verified")
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
