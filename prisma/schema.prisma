datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Portfolio {
  id              String           @id @default(cuid())
  name            String
  createdAt       DateTime         @default(now()) @map(name: "created_at")
  user            User             @relation(fields: [userId], references: [id])
  userId          String           @unique
  portfolioStocks PortfolioStock[]
}

model Stock {
  id              String           @id @default(cuid())
  name            String
  ticker          String
  index           String
  price           Float
  createdAt       DateTime         @default(now()) @map(name: "created_at")
  PortfolioStocks PortfolioStock[]
}

model PortfolioStock {
  id           String        @id @default(cuid())
  transactions Transaction[]
  shares       Int
  average      Float
  createdAt    DateTime      @default(now()) @map(name: "created_at")
  portfolio    Portfolio     @relation(fields: [portfolioId], references: [id])
  portfolioId  String
  stock        Stock         @relation(fields: [stockId], references: [id])
  stockId      String
  User         User?         @relation(fields: [userId], references: [id])
  userId       String?
}

model Transaction {
  id               String          @id @default(cuid())
  ticker           String
  price            Float
  units            Float
  type             String
  createdAt        DateTime        @default(now()) @map(name: "created_at")
  user             User?           @relation(fields: [userId], references: [id])
  userId           String?
  PortfolioStock   PortfolioStock? @relation(fields: [PortfolioStockId], references: [id])
  PortfolioStockId String?
}

enum Role {
  USER
  ADMIN
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String           @id @default(cuid())
  name           String?
  email          String?          @unique
  image          String?
  createdAt      DateTime         @default(now()) @map(name: "created_at")
  updatedAt      DateTime         @updatedAt @map(name: "updated_at")
  PortfolioStock PortfolioStock[]
  Transaction    Transaction[]
  accounts       Account[]
  Session        Session[]
  portfolio      Portfolio?
  emailVerified  DateTime?        @map("email_verified")
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
